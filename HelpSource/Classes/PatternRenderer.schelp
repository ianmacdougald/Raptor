TITLE::PatternRenderer
summary::Dynamically render patterns from modules via NRT synthesis. 
categories::Libraries>CodexIan>Composites
related::Classes/Composite

DESCRIPTION::

PatternRenderer automates the rendering of  batches of audio files by rendering patterns via link::Guides/Non-Realtime-Synthesis##NRT synthesis::. PatternRenderer inherits from link::Classes/Composite:: and so specifies the link::Classes/SynthDef:: and link::Tutorials/A-Practical-Guide/PG_01_Introduction##patterns:: using that framework. (See link::Guides/MusicCompositing::).

CLASSMETHODS::

copymethod:: Composite *new
private::new

private::formatName

INSTANCEMETHODS::

private::initPatternRenderer
private::makeTemplates

method::render
argument::duration
Time in seconds of the audio to render. 
argument::normalize
A boolean that specifies whether or not the rendered file should be normalized.

method::renderN
argument::n
An integer specifying how many audio files to render.
argument::duration
Time in seconds of the audio to render.
argument::normalize
A boolean that specifies whether or not the rendered file should be normalized.

method::stop
Stops a render in progress.
private::stopRenderN
private::stopRender

method::reset
Resets the rendering process if an error occurred in the middle of it and it got stuck. 

method::isRendering
returns::Boolean (true or false) if the rendering process is engaged.

private::prIsRendering
private::isRenderingN

copymethod:: FileIncrementer -fileTemplate
copymethod:: FileIncrementer -folder
method::server
Gets and sets a reference to a server. 

method::options
Gets the link::Classes/ServerOptions:: that are used to format and render the audio file. 


private::fileTemplate
private::folder

private::formatName
private::makeSynthDefBundle
private::addSynthDefBundle
private::getScore
private::prepareToRender
private::prRender
private::cleanUp
private::renderMessage
private::getServerOptions
private::checkFolder
private::initHybrid
private::getSynthDefBundle

EXAMPLES::
Making a single render is easy:
code:: 
p = PatternRenderer.new; 
p.render(8); 
::
The code for making many renders is similar:
code::
p = PatternRenderer.new; 
p.renderN(8, 8);
::
Rendering different patterns or code is easy: 
code::
p = PatternRenderer.new(\experimental, \default); 
//If you want, rewrite the modules in the \experimental directory 
//and then run the following. 
//(Note that one can use streams to control durations.)
p.renderN(8, Pexprand(0.5, 16.0, inf).asStream); 
::
It is possible to switch between module types to make different renders. 
code:: 
p = PatternRenderer.new(\experimental, \default); 
//(Note that one can use functions to control durations.)
p.renderN(8, {exprand(0.5, 16.0)});

p.moduleName_(\default); 
p.renderN(8, Pseq([1, 2, 3, 2, 1], inf).asStream);
::
