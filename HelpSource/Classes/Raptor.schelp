TITLE::Raptor
summary::Iterative pattern renderer
categories::Libraries>Codices

DESCRIPTION::
Raptor iteratively renders patterns as audio files via link::Guides/Non-Realtime-Synthesis##NRT synthesis.:: Raptor utilizes the framework establsihed by link::Classes/Codex:: and so can be interacted with in the ways laid out in the corresponding link::Guides/Codex##guide.::

CLASSMETHODS::

copymethod:: Codex *new
private::makeTemplates
private::contribute

INSTANCEMETHODS::

method::render
argument::duration
Time in seconds of the audio to render.

method::renderN
argument::n
An integer specifying how many audio files to render.
argument::duration
Time in seconds of the audio to render.

method::stop
Stops process started by link::Classes/Raptor#-renderN::.

method::folder
Gets and sets the folder where recordings are stored.

method::fileName
Gets and sets the name of the base fileName to be incrementally created.

method::options
Gets the link::Classes/ServerOptions:: that are used to format and render the audio file.

private::getScore
private::initCodex
private::fullPath
private::increment
private::extension

EXAMPLES::
Making a single render is easy.
code::
r = Raptor.new(\example);
r.render(4);
::
The code for making many renders is similar.
code::
r = Raptor.new(\example);
r.renderN(4, 4);
::
Different render durations can be specifies with functions or streams.
code::
r = Raptor.new(\example2);
r.renderN(4, Pseq([0.2, 0.4, 0.8, 1.0], 1).asStream);
r.renderN(4, { exprand(0.5, 16) });
::
